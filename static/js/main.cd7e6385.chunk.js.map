{"version":3,"sources":["utils/constants.js","components/Calculator/Calculator.js","components/Main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["buttons","Calculator","observer","screen","useLocalObservable","historyInput","mainInput","isRightOperand","isResult","leftOperand","rightOperand","operatop","result","data","historyData","calculate","operator","console","log","this","clear","display","evt","isNaN","Number","target","textContent","String","slice","includes","parseFloat","length","parseInt","className","map","item","index","onClick","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cd7e6385.chunk.js","sourcesContent":["const buttons = ['AC', 'DEL', 'รท', 7, 8, 9, '*', 4, 5, 6, '+', 1, 2, 3, '-', '.', 0, '='];\n\nexport { buttons, };","import './Calculator.css';\nimport { observer, useLocalObservable } from \"mobx-react-lite\";\nimport { buttons } from '../../utils/constants';\n\nconst Calculator = observer(() => {\n  const screen = useLocalObservable(() => ({\n    historyInput: 0,\n    mainInput: 0,\n    isRightOperand: false,\n    isResult: false,\n    leftOperand: 0,\n    rightOperand: 0,\n    operatop: '',\n    result: 0,\n    data: 0,\n    historyData: '0',\n    calculate(leftOperand, rightOperand, operator) {\n      console.log('leftOperand', leftOperand);\n      console.log('rightOperand', rightOperand);\n      console.log('operator', operator);\n\n      if (operator === '+') {\n        this.result = leftOperand + rightOperand;\n        console.log('this.result', this.result);\n      } else if (operator === '-') {\n        this.result = leftOperand - rightOperand;\n        console.log('this.result', this.result);\n      } else if (operator === '*') {\n        this.result = leftOperand * rightOperand;\n        console.log('this.result', this.result);\n      } else if (operator === 'รท') {\n        this.result = leftOperand / rightOperand;\n        console.log('this.result', this.result);\n      }\n    },\n    clear() {\n      this.historyInput = 0;\n      this.mainInput = 0;\n      this.isRightOperand = false;\n      this.isResult = false;\n      this.leftOperand = 0;\n      this.rightOperand = 0;\n      this.operatop = '';\n      this.result = 0;\n      this.data = 0;\n      this.historyData = 0;\n    },\n    display(evt) {\n      if (!isNaN(Number(evt.target.textContent)) || (evt.target.textContent === '.')) {\n        if (!this.isRightOperand) {\n          this.data = String(this.data + evt.target.textContent);\n          this.mainInput = this.data.slice(1);\n\n          if (this.data.includes('.')) {\n            this.leftOperand = parseFloat(this.data);\n          } else {\n            this.leftOperand = parseInt(this.data);\n          }\n        } else {\n          this.data = String(this.data + evt.target.textContent);\n          this.mainInput = this.data.slice(1);\n\n          if (this.data.includes('.')) {\n            this.rightOperand = parseFloat(this.data);\n          } else {\n            this.rightOperand = parseInt(this.data);\n          }\n        }\n\n      } else {\n        if (evt.target.textContent !== 'DEL') {\n          this.historyData = String(this.historyData + this.mainInput + evt.target.textContent);\n          console.log('this.historyData', this.historyData);\n          this.historyInput = this.historyData.slice(1);\n          this.isRightOperand = true;\n          this.data = 0;\n        }\n\n        if ((evt.target.textContent !== '=') && (evt.target.textContent !== 'DEL')) {\n          this.operatop = evt.target.textContent;\n        }\n\n        if (evt.target.textContent === 'DEL') {\n          if (this.data.includes('.')) {\n            this.mainInput = parseFloat(String(this.mainInput).slice(0, String(this.mainInput).length - 1));\n            this.leftOperand = this.mainInput;\n          } else {\n            this.mainInput = parseInt(String(this.mainInput).slice(0, String(this.mainInput).length - 1));\n            this.leftOperand = this.mainInput;\n          }\n\n          if (!this.mainInput) {\n            this.mainInput = 0;\n          }\n\n          if (!this.isRightOperand) {\n            this.leftOperand = this.mainInput;\n          } else {\n            this.rightOperand = this.mainInput;\n          }\n        }\n\n        if (evt.target.textContent === '=') {\n          this.calculate(this.leftOperand, this.rightOperand, this.operatop);\n          this.mainInput = this.result;\n          this.leftOperand = this.result;\n          this.data = String(this.result);\n        }\n\n        if (evt.target.textContent === 'AC') {\n          this.clear();\n        }\n      }\n    }\n  }));\n\n  return (\n    <div className=\"calculator\">\n      <div className=\"calculator__screen\">\n        <div className=\"calculator__screen-history\">{screen.historyInput}</div>\n        <div className=\"calculator__screen-main\">{screen.mainInput}</div>\n      </div>\n      <div className=\"calculator__keyboard\">\n        {buttons.map(((item, index) =>\n          <div\n            onClick={screen.display}\n            key={index}\n            className=\"calculator__key\"\n          >{item}</div>))}\n      </div>\n    </div>\n  )\n});\n\nexport default Calculator;","import './Main.css';\nimport Calculator from '../Calculator/Calculator';\n\nfunction Main() {\n  return (\n    <main className=\"main\">\n      <Calculator />\n    </main>\n  )\n};\n\nexport default Main;","import './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}